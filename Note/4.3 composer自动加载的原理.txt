composer 使用spl_autoload_register 函数
composer.json文件
{
    "autoload": {
        "classmap": [
            "app/controllers",
            "app/models"
        ],
        "psr-4": {
            "App\\": "app/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
}
执行composer dump-autoload 文件vendor/composer/autoload_classmap.php将类名和地址做映射。
<?php

// autoload_classmap.php @generated by Composer

$vendorDir = dirname(dirname(__FILE__));
$baseDir = dirname($vendorDir);

return array(
    'AdminInitSeeder' => $baseDir . '/database/seeds/AdminInitSeeder.php',
    'App\\Console\\Commands\\AppCommand' => $baseDir . '/app/Console/Commands/AppCommand.php',
);

首页index.php调用composer 的autoload文件
require __DIR__.'/../vendor/autoload.php';
会调用ComposerAutoloaderInit类的静态方法getLoader()

require_once __DIR__ . '/composer/autoload_real.php';
return ComposerAutoloaderInite20c59c9b48465886406937a6a21ed82::getLoader();
vendor/composer目录下有四个配置文件
autoload_classmap.php 要加载的class映射
autoload_files.php 要加载的文件
autoload_namespaces.php psr-0标准
psr4.php  psr4标准
getLoader先把配置文件放到classloader的私有属性中
self::$loader = $loader = new \Composer\Autoload\ClassLoader(); //初始化classloader类
    $map = require __DIR__ . '/autoload_namespaces.php';
    foreach ($map as $namespace => $path) {
        $loader->set($namespace, $path);
    }

    $map = require __DIR__ . '/autoload_psr4.php';
    foreach ($map as $namespace => $path) {
        $loader->setPsr4($namespace, $path);
    }

    $classMap = require __DIR__ . '/autoload_classmap.php';
    if ($classMap) {
        $loader->addClassMap($classMap);
    }
加入对象私有属性
后通过$loader->register(true)来调用spl_autoload_register()
    public function register($prepend = false)
    {
        spl_autoload_register(array($this, 'loadClass'), true, $prepend);
    }

spl_autoload_register将loadClass方法注册到了autoload队列中 然后当PHP引擎试图实例化未知类操作 就会根据类名 和命名空间加载该类文件。
    public function loadClass($class)
    {
        if ($file = $this->findFile($class)) {
            includeFile($file);

            return true;
        }
    }